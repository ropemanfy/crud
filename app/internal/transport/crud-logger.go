// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"crud/internal/interfaces"
	"crud/internal/models"
	"crud/internal/transport/viewer"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"time"
)

type loggerCrud struct {
	next interfaces.Crud
}

func loggerMiddlewareCrud() MiddlewareCrud {
	return func(next interfaces.Crud) interfaces.Crud {
		return &loggerCrud{next: next}
	}
}

func (m loggerCrud) Create(ctx context.Context, req models.UserRequest) (resp models.UserResponse, err error) {
	logger := log.Ctx(ctx).With().Str("service", "Crud").Str("method", "create").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method":   "crud.create",
				"request":  viewer.Sprintf("%+v", requestCrudCreate{Req: req}),
				"response": viewer.Sprintf("%+v", responseCrudCreate{Resp: resp}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call create")
			return
		}
		logger.Info().Func(logHandle).Msg("call create")
	}(time.Now())
	return m.next.Create(ctx, req)
}

func (m loggerCrud) GetUser(ctx context.Context) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "Crud").Str("method", "getUser").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method":   "crud.getUser",
				"request":  viewer.Sprintf("%+v", requestCrudGetUser{}),
				"response": viewer.Sprintf("%+v", responseCrudGetUser{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getUser")
			return
		}
		logger.Info().Func(logHandle).Msg("call getUser")
	}(time.Now())
	return m.next.GetUser(ctx)
}

func (m loggerCrud) GetUsers(ctx context.Context) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "Crud").Str("method", "getUsers").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method":   "crud.getUsers",
				"request":  viewer.Sprintf("%+v", requestCrudGetUsers{}),
				"response": viewer.Sprintf("%+v", responseCrudGetUsers{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getUsers")
			return
		}
		logger.Info().Func(logHandle).Msg("call getUsers")
	}(time.Now())
	return m.next.GetUsers(ctx)
}

func (m loggerCrud) Update(ctx context.Context) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "Crud").Str("method", "update").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method":   "crud.update",
				"request":  viewer.Sprintf("%+v", requestCrudUpdate{}),
				"response": viewer.Sprintf("%+v", responseCrudUpdate{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call update")
			return
		}
		logger.Info().Func(logHandle).Msg("call update")
	}(time.Now())
	return m.next.Update(ctx)
}

func (m loggerCrud) Delete(ctx context.Context) (err error) {
	logger := log.Ctx(ctx).With().Str("service", "Crud").Str("method", "delete").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"method":   "crud.delete",
				"request":  viewer.Sprintf("%+v", requestCrudDelete{}),
				"response": viewer.Sprintf("%+v", responseCrudDelete{}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call delete")
			return
		}
		logger.Info().Func(logHandle).Msg("call delete")
	}(time.Now())
	return m.next.Delete(ctx)
}
