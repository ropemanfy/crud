// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"github.com/gofiber/fiber/v2"
	otg "github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/ext"
)

func (http *httpCrud) create(ctx context.Context, request requestCrudCreate) (response responseCrudCreate, err error) {

	span := otg.SpanFromContext(ctx)
	span.SetTag("method", "create")

	response.Resp, err = http.svc.Create(ctx, request.Req)
	if err != nil {
		if http.errorHandler != nil {
			err = http.errorHandler(err)
		}
		errData := toString(err)
		ext.Error.Set(span, true)
		span.SetTag("msg", err.Error())
		if errData != "{}" {
			span.SetTag("errData", errData)
		}
	}
	return
}
func (http *httpCrud) serveCreate(ctx *fiber.Ctx) (err error) {

	span := otg.SpanFromContext(ctx.UserContext())
	span.SetTag("method", "create")

	var request requestCrudCreate
	if err = ctx.BodyParser(&request); err != nil {
		ext.Error.Set(span, true)
		span.SetTag("msg", "request body could not be decoded: "+err.Error())
		ctx.Response().SetStatusCode(fiber.StatusBadRequest)
		_, err = ctx.WriteString("request body could not be decoded: " + err.Error())
		return
	}

	var response responseCrudCreate
	if response, err = http.create(ctx.UserContext(), request); err == nil {
		var iResponse interface{} = response
		if redirect, ok := iResponse.(withRedirect); ok {
			return ctx.Redirect(redirect.RedirectTo())
		}
		return sendResponse(ctx, response)
	}
	if errCoder, ok := err.(withErrorCode); ok {
		ctx.Status(errCoder.Code())
	} else {
		ctx.Status(fiber.StatusInternalServerError)
	}
	return sendResponse(ctx, err)
}
