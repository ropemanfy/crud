// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"crud/internal/interfaces"
	"crud/internal/models"
	"fmt"
	"github.com/go-kit/kit/metrics"
	"time"
)

type metricsCrud struct {
	next            interfaces.Crud
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareCrud(next interfaces.Crud) interfaces.Crud {
	return &metricsCrud{
		next:            next,
		requestCount:    RequestCount.With("service", "Crud"),
		requestCountAll: RequestCountAll.With("service", "Crud"),
		requestLatency:  RequestLatency.With("service", "Crud"),
	}
}

func (m metricsCrud) Create(ctx context.Context, req models.UserRequest) (resp models.UserResponse, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "create", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "create", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "create").Add(1)

	return m.next.Create(ctx, req)
}

func (m metricsCrud) GetUser(ctx context.Context) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getUser", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getUser", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getUser").Add(1)

	return m.next.GetUser(ctx)
}

func (m metricsCrud) GetUsers(ctx context.Context) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getUsers", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getUsers", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getUsers").Add(1)

	return m.next.GetUsers(ctx)
}

func (m metricsCrud) Update(ctx context.Context) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "update", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "update", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "update").Add(1)

	return m.next.Update(ctx)
}

func (m metricsCrud) Delete(ctx context.Context) (err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "delete", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "delete", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "delete").Add(1)

	return m.next.Delete(ctx)
}
