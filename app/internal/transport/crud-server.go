// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"crud/internal/interfaces"
	"crud/internal/models"
)

type serverCrud struct {
	svc      interfaces.Crud
	create   CrudCreate
	getUser  CrudGetUser
	getUsers CrudGetUsers
	update   CrudUpdate
	delete   CrudDelete
}

type MiddlewareSetCrud interface {
	Wrap(m MiddlewareCrud)
	WrapCreate(m MiddlewareCrudCreate)
	WrapGetUser(m MiddlewareCrudGetUser)
	WrapGetUsers(m MiddlewareCrudGetUsers)
	WrapUpdate(m MiddlewareCrudUpdate)
	WrapDelete(m MiddlewareCrudDelete)

	WithTrace()
	WithMetrics()
	WithLog()
}

func newServerCrud(svc interfaces.Crud) *serverCrud {
	return &serverCrud{
		create:   svc.Create,
		delete:   svc.Delete,
		getUser:  svc.GetUser,
		getUsers: svc.GetUsers,
		svc:      svc,
		update:   svc.Update,
	}
}

func (srv *serverCrud) Wrap(m MiddlewareCrud) {
	srv.svc = m(srv.svc)
	srv.create = srv.svc.Create
	srv.getUser = srv.svc.GetUser
	srv.getUsers = srv.svc.GetUsers
	srv.update = srv.svc.Update
	srv.delete = srv.svc.Delete
}

func (srv *serverCrud) Create(ctx context.Context, req models.UserRequest) (resp models.UserResponse, err error) {
	return srv.create(ctx, req)
}

func (srv *serverCrud) GetUser(ctx context.Context) (err error) {
	return srv.getUser(ctx)
}

func (srv *serverCrud) GetUsers(ctx context.Context) (err error) {
	return srv.getUsers(ctx)
}

func (srv *serverCrud) Update(ctx context.Context) (err error) {
	return srv.update(ctx)
}

func (srv *serverCrud) Delete(ctx context.Context) (err error) {
	return srv.delete(ctx)
}

func (srv *serverCrud) WrapCreate(m MiddlewareCrudCreate) {
	srv.create = m(srv.create)
}

func (srv *serverCrud) WrapGetUser(m MiddlewareCrudGetUser) {
	srv.getUser = m(srv.getUser)
}

func (srv *serverCrud) WrapGetUsers(m MiddlewareCrudGetUsers) {
	srv.getUsers = m(srv.getUsers)
}

func (srv *serverCrud) WrapUpdate(m MiddlewareCrudUpdate) {
	srv.update = m(srv.update)
}

func (srv *serverCrud) WrapDelete(m MiddlewareCrudDelete) {
	srv.delete = m(srv.delete)
}

func (srv *serverCrud) WithTrace() {
	srv.Wrap(traceMiddlewareCrud)
}

func (srv *serverCrud) WithMetrics() {
	srv.Wrap(metricsMiddlewareCrud)
}

func (srv *serverCrud) WithLog() {
	srv.Wrap(loggerMiddlewareCrud())
}
